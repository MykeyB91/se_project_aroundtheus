!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:i}=e;this.name=n,this.link=i,this._cardSelector=t,this._handleImageClick=s}_getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_handleLikeButton(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_is-active")}_handleDeleteButton(){this._cardElement.remove()}_setEventListener(){this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this.name,this.link)})),this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeButton()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteButton()}))}generateCard(){return this._cardElement=this._getView(),this._cardElement.querySelector(".card__title").textContent=this.name,this._cardElement.querySelector(".card__image").src=this.link,this._cardElement.querySelector(".card__image").alt=this.name,this._setEventListener(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableSubmitButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._toggleButtonState(),this.disableSubmitButton()})),this._setEventListeners()}disableSubmitButton(){this._submitButton.disabled=!0,this._submitButton.classList.add(this._settings.inactiveButtonClass)}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}}var s=class{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(e=>{(e.target.classList.contains("modal__close")||e.target.classList.contains("modal"))&&this.close()}))}},n=class extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input")}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),super.close(),this._form.reset()}))}};const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=document.querySelector("#profile-edit-form"),r=document.querySelector("#profile-add-form"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-description-input"),c=new t(i,o);c.enableValidation();const u=new t(i,r);u.enableValidation();const m=new class extends s{constructor(e){super(e),this._image=this._popup.querySelector(".modal__preview-image"),this._caption=this._popup.querySelector(".modal__image-caption"),console.log("Image Element:",this._image),console.log("Caption Element:",this._caption)}open(e,t){this._image&&this._caption?(this._image.src=t,this._image.alt=e,this._caption.textContent=e,super.open()):console.error("Image or caption element not found")}}("#preview-image-modal");m.setEventListeners();const d=(e,t)=>{m.open(e,t)},_=new n("#edit-modal",(e=>{p(e)}));_.setEventListeners();const h=new n("#add-modal",(e=>{E.addItem(g({name:e.title,link:e.link})),u.disableSubmitButton()}));h.setEventListeners();const p=e=>{console.log("Form Data:",e),S.setUserInfo({name:e.title,job:e.description}),_.close()};function g(t){return new e(t,"#card-template",d).generateCard()}const E=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>E.addItem(g(e))},".cards__list");E.renderItems();const S=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s)}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}}({nameSelector:".profile__title",jobSelector:".profile__description"});document.querySelector("#profile-edit-button").addEventListener("click",(()=>{const e=S.getUserInfo();a.value=e.name,l.value=e.job,_.open(),c.disableSubmitButton()})),document.querySelector("#profile-add-button").addEventListener("click",(()=>{h.open()}));const f=S.getUserInfo();console.log("User Data",f),S.setUserInfo({name:"John Doe",job:"Software Developer"})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBaUIsU0FBUyxLQUN0RWdGLEVBQWdCbkMsTUFBTSxJQUl4QixNQUFNNkQsRUFBV3JCLEVBQVNtQixjQUMxQi9CLFFBQVFDLElBQUksWUFBYWdDLEdBTXpCckIsRUFBU0MsWUFKVyxDQUNsQnZHLEtBQU0sV0FDTndHLElBQUssc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9Bcm91bmQgdGhlIFVTLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vQXJvdW5kIHRoZSBVUy8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgbGluayB9LCBjYXJkU2VsZWN0b3IsIGhhbmRsZUltYWdlQ2xpY2spIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLmxpbmsgPSBsaW5rO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgfVxyXG5cclxuICBfZ2V0VmlldygpIHtcclxuICAgIHJldHVybiAodGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVMaWtlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgLmNsYXNzTGlzdC50b2dnbGUoXCJjYXJkX19saWtlLWJ1dHRvbl9pcy1hY3RpdmVcIik7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRGVsZXRlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIC8vXCIuY2FyZF9faW1hZ2VcIlxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzLm5hbWUsIHRoaXMubGluayk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vXCIuY2FyZF9fbGlrZS1idXR0b25cIlxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbigpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvL1wiLmNhcmRfX2RlbGV0ZS1idXR0b25cIlxyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVCdXR0b24oKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dldFZpZXcoKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLm5hbWU7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpLnNyYyA9IHRoaXMubGluaztcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIikuYWx0ID0gdGhpcy5uYW1lO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcigpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2V0dGluZ3MuaW5wdXRTZWxlY3RvcilcclxuICAgICk7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl9zZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NldHRpbmdzLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpO1xyXG4gIH1cclxuXHJcbiAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgIHRoaXMuZGlzYWJsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIHRoaXMuZGlzYWJsZVN1Ym1pdEJ1dHRvbigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIGRpc2FibGVTdWJtaXRCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5fc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgfVxyXG5cclxuICByZXNldFZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgfVxyXG59XHJcbiIsImNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFc2NDbG9zZShldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIikgfHxcclxuICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxcIilcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwO1xyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIHRoaXMuX2Zvcm1WYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICB0aGlzLl9mb3JtVmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLl9mb3JtVmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XHJcbiAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoRm9ybTtcclxuIiwiZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3lvc2VtaXRlLmpwZ1wiLFxyXG4gIH0sXHJcblxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcclxuICB9LFxyXG5cclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgfSxcclxuXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGF0ZW1hci5qcGdcIixcclxuICB9LFxyXG5cclxuICB7XHJcbiAgICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXHJcbiAgfSxcclxuXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYXJkRGF0YSA9IHtcclxuICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxyXG4gIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXR0aW5ncyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcbiIsImltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBTZWN0aW9uIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgeyBVc2VySW5mbyB9IGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7IGluaXRpYWxDYXJkcywgc2V0dGluZ3MgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcblxyXG5jb25zdCBwcm9maWxlRWRpdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1mb3JtXCIpO1xyXG5jb25zdCBwcm9maWxlQWRkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1hZGQtZm9ybVwiKTtcclxuY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtdGl0bGUtaW5wdXRcIik7XHJcbmNvbnN0IHByb2ZpbGVEZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNwcm9maWxlLWRlc2NyaXB0aW9uLWlucHV0XCJcclxuKTtcclxuXHJcbi8vRm9ybSBWYWxpZGF0aW9uXHJcbmNvbnN0IHByb2ZpbGVFZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBwcm9maWxlRWRpdEZvcm0pO1xyXG5wcm9maWxlRWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY29uc3QgcHJvZmlsZUFkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihzZXR0aW5ncywgcHJvZmlsZUFkZEZvcm0pO1xyXG5wcm9maWxlQWRkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vL0ltYWdlIE1vZGFsXHJcbmNvbnN0IHByZXZpZXdJbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiI3ByZXZpZXctaW1hZ2UtbW9kYWxcIik7XHJcbnByZXZpZXdJbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBoYW5kbGVJbWFnZUNsaWNrID0gKG5hbWUsIGxpbmspID0+IHtcclxuICBwcmV2aWV3SW1hZ2VQb3B1cC5vcGVuKG5hbWUsIGxpbmspO1xyXG59O1xyXG5cclxuLy9Jbml0aWFsaXppbmcgUG9wdXBzXHJcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNlZGl0LW1vZGFsXCIsIChmb3JtRGF0YSkgPT4ge1xyXG4gIGhhbmRsZVByb2ZpbGVFZGl0U2F2ZShmb3JtRGF0YSk7XHJcbn0pO1xyXG5wcm9maWxlRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBwcm9maWxlQWRkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNhZGQtbW9kYWxcIiwgKGZvcm1EYXRhKSA9PiB7XHJcbiAgc2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoeyBuYW1lOiBmb3JtRGF0YS50aXRsZSwgbGluazogZm9ybURhdGEubGluayB9KSk7XHJcbiAgcHJvZmlsZUFkZEZvcm1WYWxpZGF0b3IuZGlzYWJsZVN1Ym1pdEJ1dHRvbigpO1xyXG59KTtcclxucHJvZmlsZUFkZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL0hhbmRsaW5nIEZvcm0gU3VibWlzc2lvbnNcclxuY29uc3QgaGFuZGxlUHJvZmlsZUVkaXRTYXZlID0gKGZvcm1EYXRhKSA9PiB7XHJcbiAgY29uc29sZS5sb2coXCJGb3JtIERhdGE6XCIsIGZvcm1EYXRhKTtcclxuICB1c2VySW5mby5zZXRVc2VySW5mbyh7IG5hbWU6IGZvcm1EYXRhLnRpdGxlLCBqb2I6IGZvcm1EYXRhLmRlc2NyaXB0aW9uIH0pO1xyXG4gIHByb2ZpbGVFZGl0UG9wdXAuY2xvc2UoKTtcclxufTtcclxuXHJcbi8vQ3JlYXRlIENhcmQgRnVuY3RvblxyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGl0ZW0pIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoaXRlbSwgXCIjY2FyZC10ZW1wbGF0ZVwiLCBoYW5kbGVJbWFnZUNsaWNrKTtcclxuICByZXR1cm4gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxufVxyXG5cclxuLy9TZWN0aW9uXHJcbmNvbnN0IGl0ZW1zID0gW107XHJcblxyXG5jb25zdCBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAge1xyXG4gICAgaXRlbXM6IGluaXRpYWxDYXJkcyxcclxuICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4gc2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoaXRlbSkpLFxyXG4gIH0sXHJcbiAgXCIuY2FyZHNfX2xpc3RcIlxyXG4pO1xyXG5zZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcblxyXG4vL0luaXRpYWxpemUgVXNlciBJbmZvXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXHJcbiAgam9iU2VsZWN0b3I6IFwiLnByb2ZpbGVfX2Rlc2NyaXB0aW9uXCIsXHJcbn0pO1xyXG5cclxuLy9FdmVudCBMaXN0ZW5lcnMgZm9yIG9wZW5pbmcgTW9kYWxzXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LWJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IHVzZXJJbmZvRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgcHJvZmlsZVRpdGxlSW5wdXQudmFsdWUgPSB1c2VySW5mb0RhdGEubmFtZTtcclxuICBwcm9maWxlRGVzY3JpcHRpb25JbnB1dC52YWx1ZSA9IHVzZXJJbmZvRGF0YS5qb2I7XHJcbiAgcHJvZmlsZUVkaXRQb3B1cC5vcGVuKCk7XHJcbiAgcHJvZmlsZUVkaXRGb3JtVmFsaWRhdG9yLmRpc2FibGVTdWJtaXRCdXR0b24oKTtcclxufSk7XHJcblxyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHByb2ZpbGVBZGRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy9Vc2VyIEluZm9cclxuY29uc3QgdXNlckRhdGEgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG5jb25zb2xlLmxvZyhcIlVzZXIgRGF0YVwiLCB1c2VyRGF0YSk7XHJcblxyXG5jb25zdCBuZXdVc2VyRGF0YSA9IHtcclxuICBuYW1lOiBcIkpvaG4gRG9lXCIsXHJcbiAgam9iOiBcIlNvZnR3YXJlIERldmVsb3BlclwiLFxyXG59O1xyXG51c2VySW5mby5zZXRVc2VySW5mbyhuZXdVc2VyRGF0YSk7XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3ByZXZpZXctaW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXB0aW9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2UtY2FwdGlvblwiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiSW1hZ2UgRWxlbWVudDpcIiwgdGhpcy5faW1hZ2UpO1xyXG4gICAgY29uc29sZS5sb2coXCJDYXB0aW9uIEVsZW1lbnQ6XCIsIHRoaXMuX2NhcHRpb24pO1xyXG4gIH1cclxuXHJcbiAgb3BlbihuYW1lLCBsaW5rKSB7XHJcbiAgICBpZiAoIXRoaXMuX2ltYWdlIHx8ICF0aGlzLl9jYXB0aW9uKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbWFnZSBvciBjYXB0aW9uIGVsZW1lbnQgbm90IGZvdW5kXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9pbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgdGhpcy5faW1hZ2UuYWx0ID0gbmFtZTtcclxuICAgIHRoaXMuX2NhcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFNlY3Rpb24gfTtcclxuIiwiY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBqb2JTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2pvYkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYlNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgam9iIH0pIHtcclxuICAgIHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBqb2I7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50LFxyXG4gICAgICBqb2I6IHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgVXNlckluZm8gfTtcclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsIl9yZWYiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVJbWFnZUNsaWNrIiwibmFtZSIsImxpbmsiLCJ0aGlzIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiX2dldFZpZXciLCJfY2FyZEVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2hhbmRsZUxpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJfaGFuZGxlRGVsZXRlQnV0dG9uIiwicmVtb3ZlIiwiX3NldEV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2VuZXJhdGVDYXJkIiwidGV4dENvbnRlbnQiLCJzcmMiLCJhbHQiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJmb3JtRWxlbWVudCIsIl9zZXR0aW5ncyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dExpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b24iLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yRWxlbWVudCIsImlkIiwiYWRkIiwiaW5wdXRFcnJvckNsYXNzIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJlcnJvckNsYXNzIiwiX2hpZGVJbnB1dEVycm9yIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGFzSW52YWxpZElucHV0Iiwic29tZSIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImRpc2FibGVTdWJtaXRCdXR0b24iLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiZGlzYWJsZWQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJyZXNldFZhbGlkYXRpb24iLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsIm9wZW4iLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXAiLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9mb3JtIiwiX2dldElucHV0VmFsdWVzIiwiX2Zvcm1WYWx1ZXMiLCJpbnB1dCIsInZhbHVlIiwiZXZ0IiwicmVzZXQiLCJmb3JtU2VsZWN0b3IiLCJwcm9maWxlRWRpdEZvcm0iLCJwcm9maWxlQWRkRm9ybSIsInByb2ZpbGVUaXRsZUlucHV0IiwicHJvZmlsZURlc2NyaXB0aW9uSW5wdXQiLCJwcm9maWxlRWRpdEZvcm1WYWxpZGF0b3IiLCJwcm9maWxlQWRkRm9ybVZhbGlkYXRvciIsInByZXZpZXdJbWFnZVBvcHVwIiwiX2ltYWdlIiwiX2NhcHRpb24iLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJwcm9maWxlRWRpdFBvcHVwIiwiUG9wdXBXaXRoRm9ybSIsImZvcm1EYXRhIiwiaGFuZGxlUHJvZmlsZUVkaXRTYXZlIiwicHJvZmlsZUFkZFBvcHVwIiwic2VjdGlvbiIsImFkZEl0ZW0iLCJjcmVhdGVDYXJkIiwidGl0bGUiLCJ1c2VySW5mbyIsInNldFVzZXJJbmZvIiwiam9iIiwiZGVzY3JpcHRpb24iLCJpdGVtIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiZWxlbWVudCIsInByZXBlbmQiLCJuYW1lU2VsZWN0b3IiLCJqb2JTZWxlY3RvciIsIl9uYW1lRWxlbWVudCIsIl9qb2JFbGVtZW50IiwiX3JlZjIiLCJnZXRVc2VySW5mbyIsInVzZXJJbmZvRGF0YSIsInVzZXJEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==